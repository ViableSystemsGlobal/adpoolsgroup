generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String?
  image      String?
  role       UserRole    @default(SALES_REP)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  accounts   Account[]
  leads      Lead[]
  proformas  Proforma[]
  quotations Quotation[]

  @@map("users")
}

model Currency {
  id            String         @id @default(cuid())
  code          String         @unique
  name          String
  symbol        String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  exchangeRates ExchangeRate[]

  @@map("currencies")
}

model ExchangeRate {
  id            String    @id @default(cuid())
  fromCurrency  String
  toCurrency    String
  rate          Float
  source        String
  effectiveFrom DateTime  @default(now())
  effectiveTo   DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currency      Currency  @relation(fields: [fromCurrency], references: [code])

  @@unique([fromCurrency, toCurrency, effectiveFrom])
  @@map("exchange_rates")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id                     String          @id @default(cuid())
  sku                    String          @unique
  name                   String
  description            String?
  images                 String?
  attributes             Json?
  uomBase                String          @default("pcs")
  uomSell                String          @default("pcs")
  price                  Float?
  cost                   Float?
  originalPrice          Float?
  originalCost           Float?
  originalPriceCurrency  String?
  originalCostCurrency   String?
  exchangeRateAtImport   Float?
  lastExchangeRateUpdate DateTime?
  baseCurrency           String          @default("GHS")
  active                 Boolean         @default(true)
  categoryId             String
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  priceListItems         PriceListItem[]
  category               Category        @relation(fields: [categoryId], references: [id])
  proformaLines          ProformaLine[]
  quotationLines         QuotationLine[]
  stockItems             StockItem[]
  movements              StockMovement[]
  documents              ProductDocument[]

  @@map("products")
}

model ProductDocument {
  id          String   @id @default(cuid())
  filename    String
  originalName String
  filePath    String
  fileSize    Int
  mimeType    String
  description String?
  tags        String?
  isPublic    Boolean  @default(false)
  productId   String
  uploadedBy  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_documents")
}

model PriceList {
  id            String          @id @default(cuid())
  name          String
  channel       String          @default("direct")
  currency      String          @default("USD")
  effectiveFrom DateTime        @default(now())
  effectiveTo   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  items         PriceListItem[]

  @@map("price_lists")
}

model PriceListItem {
  id           String    @id @default(cuid())
  productId    String
  priceListId  String
  unitPrice    Float
  basePrice    Float?
  exchangeRate Float?
  overrides    Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  priceList    PriceList @relation(fields: [priceListId], references: [id])
  product      Product   @relation(fields: [productId], references: [id])

  @@unique([productId, priceListId])
  @@map("price_list_items")
}

model Account {
  id            String        @id @default(cuid())
  name          String
  type          AccountType   @default(INDIVIDUAL)
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  website       String?
  notes         String?
  ownerId       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  owner         User          @relation(fields: [ownerId], references: [id])
  contacts      Contact[]
  opportunities Opportunity[]
  proformas     Proforma[]
  quotations    Quotation[]

  @@map("accounts")
}

model Contact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  position  String?
  accountId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id])

  @@map("contacts")
}

model Lead {
  id        String     @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  company   String?
  source    String?
  status    LeadStatus @default(NEW)
  score     Int        @default(0)
  notes     String?
  ownerId   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  owner     User       @relation(fields: [ownerId], references: [id])

  @@map("leads")
}

model Opportunity {
  id          String           @id @default(cuid())
  name        String
  stage       OpportunityStage @default(NEW)
  value       Float?
  probability Int              @default(0)
  closeDate   DateTime?
  accountId   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  account     Account          @relation(fields: [accountId], references: [id])

  @@map("opportunities")
}

model Quotation {
  id         String          @id @default(cuid())
  number     String          @unique
  status     QuotationStatus @default(DRAFT)
  subject    String
  validUntil DateTime?
  notes      String?
  subtotal   Float           @default(0)
  tax        Float           @default(0)
  total      Float           @default(0)
  accountId  String
  ownerId    String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  proformas  Proforma[]
  lines      QuotationLine[]
  owner      User            @relation(fields: [ownerId], references: [id])
  account    Account         @relation(fields: [accountId], references: [id])

  @@map("quotations")
}

model QuotationLine {
  id          String    @id @default(cuid())
  quotationId String
  productId   String
  quantity    Float
  unitPrice   Float
  discount    Float     @default(0)
  lineTotal   Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  product     Product   @relation(fields: [productId], references: [id])
  quotation   Quotation @relation(fields: [quotationId], references: [id])

  @@map("quotation_lines")
}

model Proforma {
  id          String         @id @default(cuid())
  number      String         @unique
  status      ProformaStatus @default(DRAFT)
  subject     String
  validUntil  DateTime?
  notes       String?
  subtotal    Float          @default(0)
  tax         Float          @default(0)
  total       Float          @default(0)
  quotationId String?
  accountId   String
  ownerId     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  lines       ProformaLine[]
  owner       User           @relation(fields: [ownerId], references: [id])
  account     Account        @relation(fields: [accountId], references: [id])
  quotation   Quotation?     @relation(fields: [quotationId], references: [id])

  @@map("proformas")
}

model ProformaLine {
  id         String   @id @default(cuid())
  proformaId String
  productId  String
  quantity   Float
  unitPrice  Float
  discount   Float    @default(0)
  lineTotal  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  proforma   Proforma @relation(fields: [proformaId], references: [id])

  @@map("proforma_lines")
}

model StockItem {
  id           String          @id @default(cuid())
  productId    String
  quantity     Float           @default(0)
  reserved     Float           @default(0)
  available    Float           @default(0)
  averageCost  Float           @default(0)
  totalValue   Float           @default(0)
  reorderPoint Float           @default(0)
  warehouseId  String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  warehouse    Warehouse?      @relation(fields: [warehouseId], references: [id])
  product      Product         @relation(fields: [productId], references: [id])
  movements    StockMovement[]

  @@unique([productId, warehouseId])
  @@map("stock_items")
}

model Warehouse {
  id               String          @id @default(cuid())
  name             String          @unique
  code             String          @unique
  address          String?
  city             String?
  country          String?
  image            String?
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  stockItems       StockItem[]
  currentMovements StockMovement[] @relation("CurrentWarehouse")
  toMovements      StockMovement[] @relation("ToWarehouse")
  fromMovements    StockMovement[] @relation("FromWarehouse")

  @@map("warehouses")
}

model StockMovement {
  id              String            @id @default(cuid())
  productId       String
  stockItemId     String
  type            StockMovementType
  quantity        Float
  unitCost        Float?
  totalCost       Float?
  fromWarehouseId String?
  toWarehouseId   String?
  warehouseId     String?
  reference       String?
  reason          String?
  notes           String?
  userId          String?
  createdAt       DateTime          @default(now())
  warehouse       Warehouse?        @relation("CurrentWarehouse", fields: [warehouseId], references: [id])
  toWarehouse     Warehouse?        @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
  fromWarehouse   Warehouse?        @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  stockItem       StockItem         @relation(fields: [stockItemId], references: [id])
  product         Product           @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

model Activity {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  action     String
  details    Json?
  userId     String?
  createdAt  DateTime @default(now())

  @@map("activities")
}

enum UserRole {
  ADMIN
  SALES_MANAGER
  SALES_REP
  INVENTORY_MANAGER
  FINANCE_OFFICER
  EXECUTIVE_VIEWER
}

enum AccountType {
  INDIVIDUAL
  COMPANY
  PROJECT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum OpportunityStage {
  NEW
  QUALIFIED
  PROPOSAL
  QUOTATION
  NEGOTIATION
  WON
  LOST
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ProformaStatus {
  DRAFT
  SENT
  PAID
  CREDIT_APPROVED
  CANCELLED
}

enum StockMovementType {
  RECEIPT
  ADJUSTMENT
  TRANSFER_IN
  TRANSFER_OUT
  SALE
  RETURN
  DAMAGE
  THEFT
  EXPIRY
  OTHER
}
